package test.daogen.myibatis.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class TestTableExample {
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table test_table
     *
     * @abatorgenerated Wed May 18 14:47:29 CEST 2011
     */
    protected String orderByClause;

    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database table test_table
     *
     * @abatorgenerated Wed May 18 14:47:29 CEST 2011
     */
    protected List oredCriteria;

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test_table
     *
     * @abatorgenerated Wed May 18 14:47:29 CEST 2011
     */
    public TestTableExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test_table
     *
     * @abatorgenerated Wed May 18 14:47:29 CEST 2011
     */
    protected TestTableExample(TestTableExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test_table
     *
     * @abatorgenerated Wed May 18 14:47:29 CEST 2011
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test_table
     *
     * @abatorgenerated Wed May 18 14:47:29 CEST 2011
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test_table
     *
     * @abatorgenerated Wed May 18 14:47:29 CEST 2011
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test_table
     *
     * @abatorgenerated Wed May 18 14:47:29 CEST 2011
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test_table
     *
     * @abatorgenerated Wed May 18 14:47:29 CEST 2011
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test_table
     *
     * @abatorgenerated Wed May 18 14:47:29 CEST 2011
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table test_table
     *
     * @abatorgenerated Wed May 18 14:47:29 CEST 2011
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS.
     * This class corresponds to the database table test_table
     *
     * @abatorgenerated Wed May 18 14:47:29 CEST 2011
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List dateList = new ArrayList();
            Iterator iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(((Date)iter.next()).getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andTestIdIsNull() {
            addCriterion("test_id is null");
            return this;
        }

        public Criteria andTestIdIsNotNull() {
            addCriterion("test_id is not null");
            return this;
        }

        public Criteria andTestIdEqualTo(Long value) {
            addCriterion("test_id =", value, "testId");
            return this;
        }

        public Criteria andTestIdNotEqualTo(Long value) {
            addCriterion("test_id <>", value, "testId");
            return this;
        }

        public Criteria andTestIdGreaterThan(Long value) {
            addCriterion("test_id >", value, "testId");
            return this;
        }

        public Criteria andTestIdGreaterThanOrEqualTo(Long value) {
            addCriterion("test_id >=", value, "testId");
            return this;
        }

        public Criteria andTestIdLessThan(Long value) {
            addCriterion("test_id <", value, "testId");
            return this;
        }

        public Criteria andTestIdLessThanOrEqualTo(Long value) {
            addCriterion("test_id <=", value, "testId");
            return this;
        }

        public Criteria andTestIdIn(List values) {
            addCriterion("test_id in", values, "testId");
            return this;
        }

        public Criteria andTestIdNotIn(List values) {
            addCriterion("test_id not in", values, "testId");
            return this;
        }

        public Criteria andTestIdBetween(Long value1, Long value2) {
            addCriterion("test_id between", value1, value2, "testId");
            return this;
        }

        public Criteria andTestIdNotBetween(Long value1, Long value2) {
            addCriterion("test_id not between", value1, value2, "testId");
            return this;
        }

        public Criteria andTestIntIsNull() {
            addCriterion("test_int is null");
            return this;
        }

        public Criteria andTestIntIsNotNull() {
            addCriterion("test_int is not null");
            return this;
        }

        public Criteria andTestIntEqualTo(Integer value) {
            addCriterion("test_int =", value, "testInt");
            return this;
        }

        public Criteria andTestIntNotEqualTo(Integer value) {
            addCriterion("test_int <>", value, "testInt");
            return this;
        }

        public Criteria andTestIntGreaterThan(Integer value) {
            addCriterion("test_int >", value, "testInt");
            return this;
        }

        public Criteria andTestIntGreaterThanOrEqualTo(Integer value) {
            addCriterion("test_int >=", value, "testInt");
            return this;
        }

        public Criteria andTestIntLessThan(Integer value) {
            addCriterion("test_int <", value, "testInt");
            return this;
        }

        public Criteria andTestIntLessThanOrEqualTo(Integer value) {
            addCriterion("test_int <=", value, "testInt");
            return this;
        }

        public Criteria andTestIntIn(List values) {
            addCriterion("test_int in", values, "testInt");
            return this;
        }

        public Criteria andTestIntNotIn(List values) {
            addCriterion("test_int not in", values, "testInt");
            return this;
        }

        public Criteria andTestIntBetween(Integer value1, Integer value2) {
            addCriterion("test_int between", value1, value2, "testInt");
            return this;
        }

        public Criteria andTestIntNotBetween(Integer value1, Integer value2) {
            addCriterion("test_int not between", value1, value2, "testInt");
            return this;
        }

        public Criteria andTestDateIsNull() {
            addCriterion("test_date is null");
            return this;
        }

        public Criteria andTestDateIsNotNull() {
            addCriterion("test_date is not null");
            return this;
        }

        public Criteria andTestDateEqualTo(Date value) {
            addCriterionForJDBCDate("test_date =", value, "testDate");
            return this;
        }

        public Criteria andTestDateNotEqualTo(Date value) {
            addCriterionForJDBCDate("test_date <>", value, "testDate");
            return this;
        }

        public Criteria andTestDateGreaterThan(Date value) {
            addCriterionForJDBCDate("test_date >", value, "testDate");
            return this;
        }

        public Criteria andTestDateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("test_date >=", value, "testDate");
            return this;
        }

        public Criteria andTestDateLessThan(Date value) {
            addCriterionForJDBCDate("test_date <", value, "testDate");
            return this;
        }

        public Criteria andTestDateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("test_date <=", value, "testDate");
            return this;
        }

        public Criteria andTestDateIn(List values) {
            addCriterionForJDBCDate("test_date in", values, "testDate");
            return this;
        }

        public Criteria andTestDateNotIn(List values) {
            addCriterionForJDBCDate("test_date not in", values, "testDate");
            return this;
        }

        public Criteria andTestDateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("test_date between", value1, value2, "testDate");
            return this;
        }

        public Criteria andTestDateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("test_date not between", value1, value2, "testDate");
            return this;
        }

        public Criteria andTestStringIsNull() {
            addCriterion("test_string is null");
            return this;
        }

        public Criteria andTestStringIsNotNull() {
            addCriterion("test_string is not null");
            return this;
        }

        public Criteria andTestStringEqualTo(String value) {
            addCriterion("test_string =", value, "testString");
            return this;
        }

        public Criteria andTestStringNotEqualTo(String value) {
            addCriterion("test_string <>", value, "testString");
            return this;
        }

        public Criteria andTestStringGreaterThan(String value) {
            addCriterion("test_string >", value, "testString");
            return this;
        }

        public Criteria andTestStringGreaterThanOrEqualTo(String value) {
            addCriterion("test_string >=", value, "testString");
            return this;
        }

        public Criteria andTestStringLessThan(String value) {
            addCriterion("test_string <", value, "testString");
            return this;
        }

        public Criteria andTestStringLessThanOrEqualTo(String value) {
            addCriterion("test_string <=", value, "testString");
            return this;
        }

        public Criteria andTestStringLike(String value) {
            addCriterion("test_string like", value, "testString");
            return this;
        }

        public Criteria andTestStringNotLike(String value) {
            addCriterion("test_string not like", value, "testString");
            return this;
        }

        public Criteria andTestStringIn(List values) {
            addCriterion("test_string in", values, "testString");
            return this;
        }

        public Criteria andTestStringNotIn(List values) {
            addCriterion("test_string not in", values, "testString");
            return this;
        }

        public Criteria andTestStringBetween(String value1, String value2) {
            addCriterion("test_string between", value1, value2, "testString");
            return this;
        }

        public Criteria andTestStringNotBetween(String value1, String value2) {
            addCriterion("test_string not between", value1, value2, "testString");
            return this;
        }

        public Criteria andTestDecimalIsNull() {
            addCriterion("test_decimal is null");
            return this;
        }

        public Criteria andTestDecimalIsNotNull() {
            addCriterion("test_decimal is not null");
            return this;
        }

        public Criteria andTestDecimalEqualTo(BigDecimal value) {
            addCriterion("test_decimal =", value, "testDecimal");
            return this;
        }

        public Criteria andTestDecimalNotEqualTo(BigDecimal value) {
            addCriterion("test_decimal <>", value, "testDecimal");
            return this;
        }

        public Criteria andTestDecimalGreaterThan(BigDecimal value) {
            addCriterion("test_decimal >", value, "testDecimal");
            return this;
        }

        public Criteria andTestDecimalGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("test_decimal >=", value, "testDecimal");
            return this;
        }

        public Criteria andTestDecimalLessThan(BigDecimal value) {
            addCriterion("test_decimal <", value, "testDecimal");
            return this;
        }

        public Criteria andTestDecimalLessThanOrEqualTo(BigDecimal value) {
            addCriterion("test_decimal <=", value, "testDecimal");
            return this;
        }

        public Criteria andTestDecimalIn(List values) {
            addCriterion("test_decimal in", values, "testDecimal");
            return this;
        }

        public Criteria andTestDecimalNotIn(List values) {
            addCriterion("test_decimal not in", values, "testDecimal");
            return this;
        }

        public Criteria andTestDecimalBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("test_decimal between", value1, value2, "testDecimal");
            return this;
        }

        public Criteria andTestDecimalNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("test_decimal not between", value1, value2, "testDecimal");
            return this;
        }
    }
}